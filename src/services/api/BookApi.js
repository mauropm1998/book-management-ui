/**
 * OpenApi specification - Mauro
 * OpenApi documentation for Spring Security
 *
 * The version of the OpenAPI document: 1.0
 * Contact: maurocristovao1998@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Book from '../model/Book';
import BookResponseDto from '../model/BookResponseDto';
import PageResponseBookResponseDto from '../model/PageResponseBookResponseDto';
import PageResponseBorrowedBookResponseDto from '../model/PageResponseBorrowedBookResponseDto';

/**
* Book service.
* @module api/BookApi
* @version 1.0
*/
export default class BookApi {

    /**
    * Constructs a new BookApi. 
    * @alias module:api/BookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the approveReturnBorrowed operation.
     * @callback module:api/BookApi~approveReturnBorrowedCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {module:api/BookApi~approveReturnBorrowedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    approveReturnBorrowed(bookId, callback) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling approveReturnBorrowed");
      }

      let pathParams = {
        'bookId': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/books/borrow/return/approve/{bookId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the borrow operation.
     * @callback module:api/BookApi~borrowCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {module:api/BookApi~borrowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    borrow(bookId, callback) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling borrow");
      }

      let pathParams = {
        'bookId': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/books/borrow/{bookId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAll operation.
     * @callback module:api/BookApi~getAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseBookResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 20)] 
     * @param {module:api/BookApi~getAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseBookResponseDto}
     */
    getAll(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PageResponseBookResponseDto;
      return this.apiClient.callApi(
        '/books', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllBorrowed operation.
     * @callback module:api/BookApi~getAllBorrowedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseBorrowedBookResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 20)] 
     * @param {module:api/BookApi~getAllBorrowedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseBorrowedBookResponseDto}
     */
    getAllBorrowed(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PageResponseBorrowedBookResponseDto;
      return this.apiClient.callApi(
        '/books/borrowed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllByOwner operation.
     * @callback module:api/BookApi~getAllByOwnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseBookResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 20)] 
     * @param {module:api/BookApi~getAllByOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseBookResponseDto}
     */
    getAllByOwner(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PageResponseBookResponseDto;
      return this.apiClient.callApi(
        '/books/owner', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllReturned operation.
     * @callback module:api/BookApi~getAllReturnedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseBorrowedBookResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 20)] 
     * @param {module:api/BookApi~getAllReturnedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseBorrowedBookResponseDto}
     */
    getAllReturned(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PageResponseBorrowedBookResponseDto;
      return this.apiClient.callApi(
        '/books/returned', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOne operation.
     * @callback module:api/BookApi~getOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BookResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {module:api/BookApi~getOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BookResponseDto}
     */
    getOne(bookId, callback) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling getOne");
      }

      let pathParams = {
        'bookId': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BookResponseDto;
      return this.apiClient.callApi(
        '/books/{bookId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the returnBorrowed operation.
     * @callback module:api/BookApi~returnBorrowedCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {module:api/BookApi~returnBorrowedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    returnBorrowed(bookId, callback) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling returnBorrowed");
      }

      let pathParams = {
        'bookId': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/books/borrow/return/{bookId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the save1 operation.
     * @callback module:api/BookApi~save1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Book} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Book} book 
     * @param {module:api/BookApi~save1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Book}
     */
    save1(book, callback) {
      let postBody = book;
      // verify the required parameter 'book' is set
      if (book === undefined || book === null) {
        throw new Error("Missing the required parameter 'book' when calling save1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Book;
      return this.apiClient.callApi(
        '/books', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateArchived operation.
     * @callback module:api/BookApi~updateArchivedCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {module:api/BookApi~updateArchivedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    updateArchived(bookId, callback) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling updateArchived");
      }

      let pathParams = {
        'bookId': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/books/archived/{bookId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateShareable operation.
     * @callback module:api/BookApi~updateShareableCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {module:api/BookApi~updateShareableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    updateShareable(bookId, callback) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling updateShareable");
      }

      let pathParams = {
        'bookId': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/books/shareable/{bookId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uplodadCoverPicture operation.
     * @callback module:api/BookApi~uplodadCoverPictureCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {File} file 
     * @param {module:api/BookApi~uplodadCoverPictureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    uplodadCoverPicture(bookId, file, callback) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling uplodadCoverPicture");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uplodadCoverPicture");
      }

      let pathParams = {
        'bookId': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/books/cover/{bookId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
